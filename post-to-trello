#!/usr/bin/env node

/*


Show card IDs bookmarklet for Trello

javascript:!function(){var o=$(".card-short-id");o.each(function(){$(this).text($(this).text().replace("","").replace("","").replace("N.º ", ""))});o.hasClass("hide")?o.removeClass("hide").css({"font-weight":"normal","font-size":".9em","margin-right":"5px",padding:"2.3px 6px",background:$("body").css("background-color"),"border-radius":"10px",color:"#EE433E"}):o.addClass("hide")}();


# SCRIPT CONFIG:

### STEP 1 - get an app KEY:

https://trello.com/1/appKey/generate


### STEP 3 - get an app TOKEN using app KEY from step 1

https://trello.com/1/connect?KEY=<KEY_FROM_STEP_1>&name=git-hook&expiration=never&response_type=TOKEN&scope=read,write
(replace KEY_FROM_STEP_1 with an actual KEY)

### STEP 3 - get board ID:

append `.json` to any URL while inside the board and look for `id: "BOARD_ID",`

### STEP 4 replace
`KEY`, `TOKEN` and `board_id` with the values obtained in steps 1-3

replace `repo_link` with your repo root URL

**/

/*----------------------------------*/
/*          START CONFIG HERE       */


var KEY = process.env.TRELLO_KEY;
var TOKEN = process.env.TRELLO_TOKEN;
var REPO_LINK = process.env.REPO_LINK;
var BOARD_ID = process.env.BOARD_ID;

var COMPLETED_LIST_ID = process.env.COMPLETED_LIST_ID;

/*            END CONFIG            */
/*----------------------------------*/


/*








                    Intentionally Left BLANK







*/
// ------------------------------------ .: PACKAGE :. -------------------------------------------
//
//  ██████╗ ██████╗ ██╗      ██████╗ ██████╗ ███████╗
// ██╔════╝██╔═══██╗██║     ██╔═══██╗██╔══██╗██╔════╝
// ██║     ██║   ██║██║     ██║   ██║██████╔╝███████╗
// ██║     ██║   ██║██║     ██║   ██║██╔══██╗╚════██║
// ╚██████╗╚██████╔╝███████╗╚██████╔╝██║  ██║███████║
//  ╚═════╝ ╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝
//
// ------------------------------------  .:=========:.  ------------------------------------------
var colors = require('colors');
colors.setTheme({
    input: 'grey',
    verbose: 'cyan',
    prompt: 'grey',
    info: 'green',
    help: 'cyan',
    warn: 'yellow',
    debug: 'blue',
    error: 'red'
});

/*                                  CUSTOM LOGGING METHODS USING COLORS                   */
function error(string) {
    console.log(string.error); // using the colors plugin
}

function info(string) {
    console.log(string.info); // using the colors plugin
}

function warn(string) {
    console.warn(string.warn); // using the colors plugin
}

// ----------------------------------- .: END PACKAGE :. ------------------------------------------



if (typeof KEY === 'undefined' || typeof TOKEN === 'undefined' || typeof REPO_LINK === 'undefined' || typeof BOARD_ID === 'undefined') {
    error("Script not configured! Set ENVIRONMENT VARIABLES");
    process.exit(99);
}

var Trello = require("node-trello");
var t = new Trello(KEY, TOKEN);
var spawn = require('child_process').spawn;
var git = spawn('git', ['log', '-1', 'HEAD']);
var data = "";

git.stdout.on('data', function (d) {
    data += d;
});



git.on('exit', function () {

    var commitInfo = {};
    commitInfo.commit = data.match(/commit\s+(.+)/i)[1];
    commitInfo.author = data.match(/author:\s+([^<]+)/i)[1];
    commitInfo.date = data.match(/date:\s+(.+)/i)[1];
    commitInfo.msg = data.match(/date:\s+(.+)\s*(.*)/i)[2]; // whatever comes after "Date:" - anything is the commit message



    var re = /((address|msg|comment|note|card|close|archive|fix)e?s?(\D)*(\#?)([0-9]+)\ ?)/ig;
    var str = data;
    var m;


    var matchesArr;
    var cardActionsArr = [];
    do {
        matchesArr = [];
        // Collect all matches
        while ((m = re.exec(str)) !== null) {
            if (m.index === re.lastIndex) {
                re.lastIndex++;
            }
            matchesArr.push(m);
            cardActionsArr.push({
                verb: m[2],
                card: m[5],
            });
        }

        // Replace the matches collected in this step to be able to continue collecting in the next step
        for (i = 0; i < matchesArr.length; i++) {
            str = str.replace(matchesArr[i][0], matchesArr[i][2] + " ");
        }
    }
    while (matchesArr.length > 0); // do {} while


    //console.dir(cardActionsArr);

    for (i = 0; i < cardActionsArr.length; i++) {
        card = cardActionsArr[i].card;
        verb = cardActionsArr[i].verb;

        updateTrelloCard(card, verb, commitInfo);
    }
});


function updateTrelloCard(card, verb, commitInfo) {

    get_card(card, function (err, cardData) {

        if (err) {
            warn("[ERROR] Cannot find card matching ID " + card + " board ID = " + board_id);
            return;
        }

        REPO_LINK = REPO_LINK.replace(/\/?$/, '/');
        short_commit = commitInfo.commit.substring(0, 7);
        var commitLink = '[' + short_commit + '](' + REPO_LINK + 'commit/' + commitInfo.commit + ')';

        var comment = 'Commit by: ' + commitInfo.author + '\nDate: ' + commitInfo.date + '\nCommit: ' + commitLink +
            '\nMessage: ' +
            commitInfo.msg;


        add_comment(cardData.id, comment, function (err, commentResponse) {
            if (err) {
                throw err;
            } else {
                info('Card ' + cardData.name + ' updated');

                // Archive/Close the card if needed
                if (/close|archive/i.test(verb)) {
                    if (cardData.closed) {
                        warn('Card ' + cardData.idShort + ' is already closed');
                        return;
                    }
                    update_card(cardData.id, {
                        closed: true
                    }, function (err, updCardResponse) {
                        if (err) {
                            error('Card close operation failed');
                        }
                        if (updCardResponse.closed) {
                            info('Card closed: #' + card + ' --> ' + cardData.name);
                        } else {
                            error('Could not close card: ' + cardData.id);
                        }
                    });
                } else if (/fix|complete/i.test(verb)) {
                    if (cardData.closed) {
                        warn('Card ' + cardData.idShort + ' is already closed');
                        return;
                    }
                    move_card(cardData.id, COMPLETED_LIST_ID, function (err, updCardResponse) {
                        if (err) {
                            error('Unable to move card');
                        }else {
                            info('Card Moved')
                        }
                    });
                }
            }
        });
    });
}


function get_card(card_id, f) {
    t.get("/1/boards/" + BOARD_ID + "/cards/" + card_id, f);
}

function update_card(card_id, params, f) {
    t.put("/1/cards/" + card_id, params, f);
}

function move_card(card_id, list_id, f) {
    t.put("/1/cards/" + card_id + "/idList?value=" + list_id , {} , f);
}

function add_comment(card_id, comment, f) {
    t.post("/1/card/" + card_id + "/actions/comments", {
        text: comment
    }, f);
}

function get_cards(list_id, f) {
    t.get("/1/lists/" + list_id + "/cards", {
        fields: "idList,closed,name"
    }, f);
}
